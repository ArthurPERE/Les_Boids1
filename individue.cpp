//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>


// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "individue.h"





//############################################################################
//                                                                           #
//                           Class individue              
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
individue::individue(void)
{
	i=0;
	j=NULL;
	tab = NULL;

	x=0;
	y=0;
	vx=0;
	vy=0;
}

void individue::initialization(void)
{
	tab = new double*[number_of_individue];


	for (i = 0; i < number_of_individue; ++i)
	{
		double* tab[i] = new double[4];
		(tab[i])[0] = rand() / boid->Get_width();  //for x
		(tab[i])[1] = rand() / boid->Get_height();  //for y

		(tab[i])[2] = (rand() / 2*boid->Get_speed_limit()) - boid->Get_speed_limit();  //for vx
		(tab[i])[3] = (rand() / 2*boid->Get_speed_limit()) - boid->Get_speed_limit();  //for vy
	}


}



// ===========================================================================
//                                  Destructor
// ===========================================================================
individue::~individue(void)
{
	for (i = 0; i< number_of_individue; ++i)
	{
		delete[] tab[i];
	}

	delete[] tab;
	delete boid;
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================

// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
