//****************************************************************************
//
//
//
//****************************************************************************



#ifndef __INDIVIDUE_H__
#define __INDIVIDUE_H__

// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>



// ===========================================================================
//                                Project Files
// ===========================================================================




// ===========================================================================
//                              Class declarations
// ===========================================================================






class individue
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    individue(void);

    // =======================================================================
    //                                Destructor
    // =======================================================================
    virtual ~individue(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================
    int Get_i(void);
    int Get_j(void);
    float Get_x(int ind);
    float Get_y(int ind);
    float Get_vx(int ind);
    float Get_vy(int ind);
    // =======================================================================
    //                            Accessors: setters
    // =======================================================================

    // =======================================================================
    //                                Operators
    // =======================================================================

    // =======================================================================
    //                              Public Methods
    // =======================================================================
    int* detection(int ind); //for detecte the individue around the individue number ind
    int* organisation(void); //for organize the individue

    // =======================================================================
    //                             Public Attributes
    // =======================================================================
    int number_of_individue;




  protected :

    // =======================================================================
    //                            Forbidden Constructors
    // =======================================================================
    /*individue(void)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };
    individue(const individue &model)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };*/


    // =======================================================================
    //                              Protected Methods
    // =======================================================================

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================
    int i;     //numero of the individue
    int* j;    //numero of the individue around the individue i
    
    double x;   //position x of i
    double y;   //position y of i
    double vx;  //speed x coordonate of i
    double vy;  //speed x coordonate of i


};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================

// ===========================================================================
//                          Inline functions' definition
// ===========================================================================


#endif // __INDIVIDUE_H__

